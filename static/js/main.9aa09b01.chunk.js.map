{"version":3,"sources":["resources/girlFace.svg","resources/sensei.jpg","Components/Button.js","Components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","clickHandler","bind","className","this","shape","onClick","title","React","Component","Menu","visible","data","closeButtonHandler","map","key","App","closeMenu","showMenu","changePicture","menuData","state","menuVisible","picture","face","src","setState","sensei","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uOCqB5BC,G,wBAjBb,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,aAAa,EAAKA,aAAaC,KAAlB,gBAFD,E,sEAKhB,OACE,yBAAKC,UAAWC,KAAKJ,MAAMG,UAAY,YAAgC,UAAlBC,KAAKJ,MAAMK,MAAkB,gBAAkB,kBAAmBC,QAASF,KAAKH,cAClIG,KAAKJ,MAAMO,OAAS,U,qCAKtBH,KAAKJ,MAAMC,cACdG,KAAKJ,MAAMC,mB,GAdMO,IAAMC,YC2BZC,G,kBAzBb,WAAYV,GAAO,qEACZA,I,sEAGL,GAAII,KAAKJ,MAAMW,QAAS,CACXP,KAAKJ,MAAMY,KACtB,OACE,yBAAKT,UAAU,QACb,kBAAC,EAAD,CAAQI,MAAM,IAAIF,MAAM,SAASJ,aAAcG,KAAKJ,MAAMa,qBAC1D,6BACGT,KAAKJ,MAAMY,KAAKE,KAAI,SAACF,GAAD,OACnB,kBAAC,EAAD,CAAQG,IAAKH,EAAKG,IACVR,MAAOK,EAAKL,MACZN,aAAcW,EAAKX,oBAOnC,OAAO,S,GArBMO,IAAMC,Y,iCCyCVO,E,YArCb,WAAYhB,GAAO,IAAD,uBAChB,4CAAMA,KACDiB,UAAU,EAAKA,UAAUf,KAAf,gBACf,EAAKgB,SAAS,EAAKA,SAAShB,KAAd,gBACd,EAAKiB,cAAc,EAAKA,cAAcjB,KAAnB,gBACnB,IAAMkB,EAAS,CACX,CAACL,IAAK,EAAER,MAAO,4BACf,CAACQ,IAAK,EAAER,MAAO,wCACf,CAACQ,IAAK,EAAER,MAAO,gEACf,CAACQ,IAAK,EAAER,MAAO,kCACf,CAACQ,IAAK,EAAER,MAAO,4EAAgBN,aAAc,EAAKkB,gBAVtC,OAYhB,EAAKE,MAAM,CAACC,aAAa,EAAOF,SAAUA,EAAUG,QAASC,KAZ7C,E,sEAgBhB,OACA,yBAAKrB,UAAU,QACb,kBAAC,EAAD,CAAQA,UAAU,aAAaI,MAAM,2BAAON,aAAcG,KAAKc,SAAUb,MAAM,WAC/E,kBAAC,EAAD,CAAMO,KAAMR,KAAKiB,MAAMD,SAAUT,QAASP,KAAKiB,MAAMC,YAAaT,mBAAoBT,KAAKa,YAC3F,yBAAKd,UAAU,WACb,yBAAKsB,IAAKrB,KAAKiB,MAAME,QAASpB,UAAU,oB,iCAM5CC,KAAKsB,SAAS,CAACJ,aAAa,M,kCAG5BlB,KAAKsB,SAAS,CAACJ,aAAa,M,sCAG5BlB,KAAKsB,SAAS,CAACH,QAASI,U,GAlCVnB,IAAMC,WCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9aa09b01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/girlFace.e1ddb0c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/sensei.489373ca.jpg\";","import React from 'react';\nimport './Button.css';\n\nclass Button extends React.Component {\t\n  constructor(props){\n  \tsuper(props);\n  \tthis.clickHandler=this.clickHandler.bind(this);\n  };\n  render(){\n    return (\n      <div className={this.props.className + \" Button \" + (this.props.shape=='square' ? 'Button-square' : 'Button-default')} onClick={this.clickHandler}> \n        {this.props.title || \"Text\"}\n      </div>\n      );\n  };\n  clickHandler(){\n  \tif (this.props.clickHandler)\n  \t\tthis.props.clickHandler();\n  }\n};\n\nexport default Button;\n","import React from 'react';\nimport './Menu.css';\nimport Button from './Button';\n\nclass Menu extends React.Component {\t\n  constructor(props){\n  \tsuper(props);\n  };\n  render(){\n    if (this.props.visible) {\n      const data=this.props.data;\n      return (\n        <div className=\"Menu\"> \n          <Button title=\"X\" shape='square' clickHandler={this.props.closeButtonHandler}/>\n          <div>\n            {this.props.data.map((data) =>\n              <Button key={data.key}\n                      title={data.title}\n                      clickHandler={data.clickHandler}/>\n              )}\n          </div>\n        </div>\n      );\n    }\n    else {\n      return null;\n    }\n  }\n};\n\nexport default Menu;\n","import React from 'react';\nimport './App.css';\nimport Button from './Components/Button';\nimport Menu from './Components/Menu';\nimport face from './resources/girlFace.svg'\nimport sensei from './resources/sensei.jpg'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.closeMenu=this.closeMenu.bind(this);\n    this.showMenu=this.showMenu.bind(this);\n    this.changePicture=this.changePicture.bind(this);\n    const menuData=[\n        {key: 1,title: \"Шмот\"},\n        {key: 2,title: \"Бонусы\"},\n        {key: 3,title: \"Достижения\"},\n        {key: 4,title: \"Чатик\"},\n        {key: 5,title: \"Советы сенсея\",clickHandler: this.changePicture}\n        ];\n    this.state={menuVisible: false, menuData: menuData, picture: face};\n\n  }\n  render() {\n    return (\n    <div className=\"Main\">\n      <Button className=\"MenuButton\" title=\"Меню\" clickHandler={this.showMenu} shape='square'/>\n      <Menu data={this.state.menuData} visible={this.state.menuVisible} closeButtonHandler={this.closeMenu}/>\n      <div className=\"Content\">\n        <img src={this.state.picture} className=\"FacePicture\"/>\n      </div>\n    </div>\n    );\n  };\n  showMenu() {\n    this.setState({menuVisible: true});\n  }\n  closeMenu() {\n    this.setState({menuVisible: false});\n  }\n  changePicture() {\n    this.setState({picture: sensei})\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}